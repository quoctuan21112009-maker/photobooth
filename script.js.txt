// script.js - Photobooth 6-shot collage (3x2)
const video = document.getElementById('video');
const startCamBtn = document.getElementById('startCam');
const captureBtn = document.getElementById('capture6');
const retakeBtn = document.getElementById('retake');
const flash = document.getElementById('flash');
const overlay = document.getElementById('shotOverlay');

const collageCanvas = document.getElementById('collageCanvas');
const downloadBtn = document.getElementById('downloadBtn');
const showImgBtn = document.getElementById('showImg');
const finalImgWrap = document.getElementById('finalImgWrap');
const finalImg = document.getElementById('finalImg');
const closeFinal = document.getElementById('closeFinal');
const dateStamp = document.getElementById('dateStamp');

let stream = null;
let shots = []; // store captured ImageBitmaps or dataUrls
let capturing = false;

// Canvas layout parameters (cells)
const cellW = 560; // pixels cell width
const cellH = 420; // pixels cell height
const gutter = 20;
const cols = 2;
const rows = 3;
const collageW = cols * cellW + (cols - 1) * gutter; // 2*560 + 20 = 1140
const collageH = rows * cellH + (rows - 1) * gutter + 160; // extra bottom for space for logo area
collageCanvas.width = collageW;
collageCanvas.height = collageH;

// Draw initial blank (transparent) canvas for preview
const ctx = collageCanvas.getContext('2d');
ctx.fillStyle = '#f6fff6';
ctx.fillRect(0, 0, collageW, collageH);

// show date stamp
function formatDate(d = new Date()){
  const opts = { year: 'numeric', month: 'short', day: '2-digit' };
  return d.toLocaleDateString('en-US', opts);
}
dateStamp.textContent = formatDate();

// start camera
async function startCamera(){
  if(stream) stopCamera();
  try {
    stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'user' }, audio: false });
    video.srcObject = stream;
    startCamBtn.textContent = 'Camera Đang Bật';
    startCamBtn.disabled = true;
  } catch (e){
    alert('Không thể truy cập camera. Vui lòng cho phép quyền camera.');
    console.error(e);
  }
}

function stopCamera(){
  if(stream){
    stream.getTracks().forEach(t=>t.stop());
    stream = null;
    startCamBtn.disabled = false;
    startCamBtn.textContent = 'Bật Camera';
  }
}

// utility: flash effect
function doFlash(ms = 90){
  flash.classList.add('show');
  setTimeout(()=> flash.classList.remove('show'), ms);
}

// capture single frame as ImageBitmap (more performant)
async function captureFrame(){
  // create temporary canvas sized to cell for consistent cropping
  const vW = video.videoWidth || 1280;
  const vH = video.videoHeight || 960;
  // Want to crop to cover the cell aspect ratio (cellW:cellH)
  const targetAR = cellW / cellH; // ~1.333 (4:3)
  const vidAR = vW / vH;

  let sx=0, sy=0, sw=vW, sh=vH;
  if(vidAR > targetAR){
    // video is wider -> crop sides
    const newW = Math.round(vH * targetAR);
    sx = Math.round((vW - newW)/2);
    sw = newW;
  } else {
    // video taller -> crop top/bottom
    const newH = Math.round(vW / targetAR);
    sy = Math.round((vH - newH)/2);
    sh = newH;
  }

  const off = document.createElement('canvas');
  off.width = cellW;
  off.height = cellH;
  const octx = off.getContext('2d');
  octx.drawImage(video, sx, sy, sw, sh, 0, 0, cellW, cellH);
  // return dataURL
  return off.toDataURL('image/jpeg', 0.92);
}

// assemble collage from shots[] (should have 6 items)
function assembleCollage(){
  // clear
  ctx.clearRect(0,0,collageW,collageH);

  // draw decorative pale background (we will keep green background by CSS wrapper; inside canvas we use white rectangles with light margin)
  ctx.fillStyle = '#fdeef6';
  ctx.fillRect(20,20,collageW-40,collageH-180);

  // draw each cell
  for(let i=0;i<rows;i++){
    for(let j=0;j<cols;j++){
      const idx = i*cols + j;
      const x = j * (cellW + gutter) + 30; // small left padding
      const y = i * (cellH + gutter) + 30;
      // draw placeholder background
      ctx.fillStyle = '#fbe9f2';
      ctx.fillRect(x, y, cellW, cellH);

      if(shots[idx]){
        // create img and draw cover
        const img = new Image();
        img.src = shots[idx];
        // draw synchronously by onload; but to keep it immediate we use promise-like
        // We'll draw synchronously if cached; otherwise onload will redraw entire collage after last loads.
        img.onload = () => {
          ctx.drawImage(img, x, y, cellW, cellH);
        };
        // attempt immediate:
        try { ctx.drawImage(img, x, y, cellW, cellH); } catch(e){}
        // small inner frame
        ctx.strokeStyle = 'rgba(255,255,255,0.6)';
        ctx.lineWidth = 6;
        ctx.strokeRect(x+2, y+2, cellW-4, cellH-4);
      } else {
        // empty placeholder text
        ctx.fillStyle = '#f0f0f0';
        ctx.fillRect(x, y, cellW, cellH);
        ctx.fillStyle = '#bdbdbd';
        ctx.font = '20px sans-serif';
        ctx.fillText('Empty', x + 20, y + 40);
      }
    }
  }

  // bottom area reserved for logo; we'll leave transparent center for CSS oval to overlap.
  // draw date on canvas bottom-right as well (redundant with DOM stamp)
  const dateText = new Date().toLocaleDateString('en-US', { year:'numeric', month:'short', day:'2-digit' });
  ctx.font = '16px sans-serif';
  ctx.fillStyle = '#333';
  ctx.fillText(dateText, collageW - 140, collageH - 60);

  // enable download
  downloadBtn.classList.remove('disabled');
  downloadBtn.classList.add('primary');
  downloadBtn.href = collageCanvas.toDataURL('image/jpeg', 0.92);
  downloadBtn.download = `photobooth-collage-${Date.now()}.jpg`;

  finalImg.src = collageCanvas.toDataURL('image/jpeg', 0.92);
  showImgBtn.disabled = false;
  retakeBtn.disabled = false;
}

// perform 6-shot sequence
async function captureSixSequence(){
  if(capturing) return;
  if(!stream){
    alert('Vui lòng bật camera trước (Bật Camera).');
    return;
  }
  capturing = true;
  shots = [];
  overlay.classList.remove('hidden');

  for(let i=0;i<6;i++){
    overlay.textContent = `${i+1} / 6`;
    doFlash(80);
    // small delay to allow flash visual
    await wait(120);
    const data = await captureFrame();
    shots.push(data);
    // short pause between shots
    await wait(700);
  }

  overlay.classList.add('hidden');
  assemblingAfterShots();
  capturing = false;
}

// helper wait
function wait(ms){ return new Promise(r=>setTimeout(r, ms)); }

async function assemblingAfterShots(){
  // assemble collage then draw
  assembleCollage();
  downloadBtn.classList.remove('disabled');
  downloadBtn.classList.remove('btn','disabled');
  downloadBtn.classList.add('primary');
}

// event listeners
startCamBtn.addEventListener('click', startCamera);
captureBtn.addEventListener('click', ()=> {
  captureSixSequence();
});

retakeBtn.addEventListener('click', ()=> {
  shots = [];
  // clear canvas
  ctx.clearRect(0,0,collageW,collageH);
  ctx.fillStyle = '#f6fff6';
  ctx.fillRect(0, 0, collageW, collageH);
  downloadBtn.classList.add('disabled');
  downloadBtn.removeAttribute('href');
  showImgBtn.disabled = true;
  retakeBtn.disabled = true;
});

downloadBtn.addEventListener('click', (e)=>{
  // if disabled, prevent
  if(downloadBtn.classList.contains('disabled')) e.preventDefault();
});

showImgBtn.addEventListener('click', ()=>{
  finalImgWrap.classList.remove('hidden');
});

closeFinal.addEventListener('click', ()=> finalImgWrap.classList.add('hidden'));

// auto stop camera when leaving
window.addEventListener('beforeunload', ()=> {
  if(stream) stopCamera();
});

// initialize: draw blank collage with decorative inner background
(function init(){
  // draw pale placeholder inside canvas
  ctx.fillStyle = '#f6fff6';
  ctx.fillRect(0,0,collageW,collageH);
  // set date inside DOM stamp
  dateStamp.textContent = new Date().toLocaleDateString('en-US', { year:'numeric', month:'short', day:'2-digit' });
})();
